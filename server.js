 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });

app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    });

app.route('/:input')
    .get(function(req, res) {
      /*console.log(req.params);
      console.log(req.params.input);*/
      res.send(checkDate(req.params.input));
  });

/*
  Function: checkDate
  input - the input from the url.
  If it's a valide input, it does converts it all properly.
*/
function checkDate(input) {
  var tempReturnObj = {"unix": null, "natural": null};
  var unixRegex = /[0-9]{9}/;
  if (unixRegex.test(input)) {
    //console.log("it's unix timestamp time.");
    tempReturnObj['unix'] = input;
  }
  if (tempReturnObj.unix === null) {
    var naturalTimestamp = / /;
    var splits = input.split(naturalTimestamp);

    var day = parseInt(splits[1]);
    var month = 1;
    var year = splits[2];
    switch(splits[0].toLowerCase()) {
      case "january":
        month = 0;
      break;
      case "february":
        month = 1;
      break;
      case "march":
        month = 2;
      break;

      case "april":
        month = 3;
      break;
      case "may":
        month = 4;
      break;
      case "june":
        month = 5;
      break;

      case "july":
        month = 6;
      break;
      case "august":
        month = 7;
      break;
      case "september":
        month = 8;
      break;

      case "october":
        month = 9;
      break;
      case "november":
        month = 10;
      break;
      case "december":
        month = 11;
      break;
    }

    var date = new Date(year, month, day);
    if (date.toDateString().toLowerCase() !== "invalid date") {
      tempReturnObj.natural = date.toDateString();
      tempReturnObj.unix = date.getTime()/1000;
    }
  } else {
    //change unix timestamp to date.
    var tempDate = new Date(input*1000);
    tempReturnObj['natural'] = tempDate.toDateString();
  }

  return tempReturnObj;
}


// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }
})

//For when launched on Glitch.com
if (process.env.PORT != null) {
  app.listen(process.env.PORT, function () {
    console.log('Node.js listening ...');
  });
} else {
  //Set port here.
  app.listen(23200, function () {
    console.log('Node.js listening ...');
  });
}
